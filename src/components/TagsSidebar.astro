---
import { Icon } from 'astro-icon/components';

export interface Props {
  tagCounts: Record<string, number>;
  totalExamples: number;
  asideClass?: string;
}

const { tagCounts, totalExamples, asideClass } = Astro.props;
---

<aside class={`w-80 h-screen overflow-y-auto flex-shrink-0 px-4 ${asideClass}`}>
  <div class="p-6">
    <!-- Header -->
    <!-- <div class="mb-6">
      <a
        href="/"
        class="button text-md font-semibold text-groq border-b-2 border-groq pb-2 hover:text-groq-600 transition-colors"
      >
        Docs
      </a>
    </div> -->

    <!-- Search Input -->
    <div class="mb-2">
      <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Icon name="mdi:magnify" class="w-6 h-6 text-gray-400" />
        </div>
        <input
          type="text"
          id="tag-search"
          placeholder="Search filters"
          class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-groq focus:border-groq text-sm"
        />
      </div>
    </div>

    <!-- Filter Tags -->
    <nav class="space-y-6">
      <div class="section-group">
        <!-- <div class="font-montserrat text-sm font-light text-gray-900 uppercase tracking-wide mb-2">
          <span>Filter by Tags</span>
        </div> -->
        
        <div class="space-y-1" id="tags-list">
          <!-- All Tags Button -->
          <button
            class="cursor-pointer block w-full text-left py-3 px-3 transition-colors duration-200 text-groq-600 font-medium rounded filter-clear filter-clear-tag sidebar-filter"
          >
            <div class="text-sm leading-tight flex items-center justify-between">
              <div class="flex items-center gap-3">
                <div class="custom-checkbox checked">
                  <svg class="checkmark" width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2 6L5 9L10 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
                <span>All</span>
              </div>
              <span
                id="all-tags-count"
                class="text-xs text-gray-600"
              >
                {totalExamples}
              </span>
            </div>
          </button>

          <!-- Individual Tag Buttons -->
          {
            Object.entries(tagCounts).map(([tag, count]) => (
              <button
                class="cursor-pointer block w-full text-left py-3 px-3 transition-colors duration-200 text-gray-600 hover:text-groq-600 hover:bg-gray-50 rounded filter-tag sidebar-filter tag-item"
                data-tag={tag}
                data-tag-name={tag.toLowerCase()}
              >
                <div class="text-sm leading-tight flex items-center justify-between">
                  <div class="flex items-center gap-3">
                    <div class="custom-checkbox">
                      <svg class="checkmark" width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2 6L5 9L10 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </div>
                    <span class="capitalize">{tag}</span>
                  </div>
                  <span class="tag-count text-xs text-gray-500">
                    {count}
                  </span>
                </div>
              </button>
            ))
          }
        </div>
      </div>
    </nav>
  </div>
</aside>

<script>
  // Global tag filtering functionality - shared between sidebar and pills
  window.tagFiltering = window.tagFiltering || {
    activeTag: null,
    
    updateURL() {
      const url = new URL(window.location.href);
      
      // Clear existing tag param
      url.searchParams.delete("tag");
      
      // Add active tag filter
      if (this.activeTag) {
        url.searchParams.set("tag", this.activeTag);
      }
      
      // Update URL without page reload
      window.history.pushState({}, "", url.toString());
    },

    loadFromURL() {
      const urlParams = new URLSearchParams(window.location.search);
      const tagParam = urlParams.get("tag");
      
      // Set active tag from URL if valid
      if (tagParam) {
        this.activeTag = tagParam;
      }
    },

    updateTagButtonStates() {
      // Reset all sidebar tag buttons to default state
      document.querySelectorAll(".sidebar-filter.filter-tag").forEach((btn) => {
        btn.classList.remove("text-groq-600", "font-medium", "bg-gray-50");
        btn.classList.add("text-gray-600", "bg-white");
        // Reset checkbox state
        const checkbox = btn.querySelector(".custom-checkbox");
        if (checkbox) {
          checkbox.classList.remove("checked");
        }
      });

      // Reset sidebar "All" button to default state
      document.querySelectorAll(".sidebar-filter.filter-clear-tag").forEach((btn) => {
        btn.classList.remove("text-groq-600", "font-medium", "bg-gray-50");
        btn.classList.add("text-gray-600", "bg-white");
        // Reset checkbox state
        const checkbox = btn.querySelector(".custom-checkbox");
        if (checkbox) {
          checkbox.classList.remove("checked");
        }
      });

      // Reset all pill tag buttons to default state
      document.querySelectorAll("#tags-container .filter-tag").forEach((btn) => {
        btn.classList.remove("bg-gray-500", "text-white");
        btn.classList.add("bg-white", "text-gray-700");
      });

      // Reset pill "All" button to default state
      document.querySelectorAll("#tags-container .filter-clear-tag").forEach((btn) => {
        btn.classList.remove("bg-white", "text-gray-700");
        btn.classList.add("bg-gray-500", "text-white");
      });

      // Highlight active buttons
      if (this.activeTag) {
        // Highlight sidebar tag button
        const sidebarTagBtn = document.querySelector(`.sidebar-filter[data-tag="${this.activeTag}"]`);
        if (sidebarTagBtn) {
          sidebarTagBtn.classList.add("text-groq-600", "font-medium", "bg-gray-50");
          sidebarTagBtn.classList.remove("text-gray-600", "bg-white");
          // Check the checkbox
          const checkbox = sidebarTagBtn.querySelector(".custom-checkbox");
          if (checkbox) {
            checkbox.classList.add("checked");
          }
        }

        // Highlight pill tag button
        const pillTagBtn = document.querySelector(`#tags-container .filter-tag[data-tag="${this.activeTag}"]`);
        if (pillTagBtn) {
          pillTagBtn.classList.add("bg-gray-500", "text-white");
          pillTagBtn.classList.remove("bg-white", "text-gray-700");
        }

        // Reset pill "All" button when tag is selected
        const pillAllBtn = document.querySelector("#tags-container .filter-clear-tag");
        if (pillAllBtn) {
          pillAllBtn.classList.remove("bg-gray-500", "text-white");
          pillAllBtn.classList.add("bg-white", "text-gray-700");
        }
      } else {
        // Highlight sidebar "All" button when no tag is selected
        const sidebarAllBtn = document.querySelector(".sidebar-filter.filter-clear-tag");
        if (sidebarAllBtn) {
          sidebarAllBtn.classList.add("text-groq-600", "font-medium", "bg-gray-50");
          sidebarAllBtn.classList.remove("text-gray-600", "bg-white");
          // Check the checkbox
          const checkbox = sidebarAllBtn.querySelector(".custom-checkbox");
          if (checkbox) {
            checkbox.classList.add("checked");
          }
        }

        // Highlight pill "All" button when no tag is selected
        const pillAllBtn = document.querySelector("#tags-container .filter-clear-tag");
        if (pillAllBtn) {
          pillAllBtn.classList.add("bg-gray-500", "text-white");
          pillAllBtn.classList.remove("bg-white", "text-gray-700");
        }
      }
    },

    filterExamples() {
      // Only target example cards within the examples-grid (not featured examples)
      const cards = document.querySelectorAll("#examples-grid .example-card");
      let visibleCount = 0;

      cards.forEach((card) => {
        const cardTags = card.dataset.tags?.split(",") || [];
        let showCard = true;

        if (this.activeTag && !cardtags?.includes(this.activeTag)) {
          showCard = false;
        }

        if (showCard) {
          visibleCount++;
          card.style.display = "block";
        } else {
          card.style.display = "none";
        }
      });

      // Show/hide no results state
      const noResults = document.getElementById("no-results");
      const examplesGrid = document.getElementById("examples-grid");

      if (visibleCount === 0) {
        noResults.classList.remove("hidden");
        examplesGrid.classList.add("hidden");
      } else {
        noResults.classList.add("hidden");
        examplesGrid.classList.remove("hidden");
      }
    },

    applyTagFilters() {
      this.updateTagButtonStates();
      this.filterExamples();
      this.updateURL();
    },

    setActiveTag(tag) {
      this.activeTag = this.activeTag === tag ? null : tag;
      this.applyTagFilters();
    },

    clearActiveTag() {
      this.activeTag = null;
      this.applyTagFilters();
    }
  };

  // Tag search functionality
  function initTagSearch() {
    const searchInput = document.getElementById("tag-search");
    const tagItems = document.querySelectorAll(".tag-item");
    
    if (!searchInput) return;
    
    searchInput.addEventListener("input", (e) => {
      const searchTerm = e.target.value.toLowerCase().trim();
      
      tagItems.forEach((tagItem) => {
        const tagName = tagItem.dataset.tagName || "";
        const shouldShow = tagName.includes(searchTerm);
        
        if (shouldShow) {
          tagItem.style.display = "block";
        } else {
          tagItem.style.display = "none";
        }
      });
    });
  }

  // Sidebar tag filter handlers
  document.querySelectorAll(".sidebar-filter.filter-tag").forEach((button) => {
    button.addEventListener("click", () => {
      const tag = button.dataset.tag || null;
      window.tagFiltering.setActiveTag(tag);
    });
  });

  // Sidebar clear filter handlers
  document.querySelectorAll(".sidebar-filter.filter-clear-tag").forEach((button) => {
    button.addEventListener("click", () => {
      window.tagFiltering.clearActiveTag();
    });
  });

  // Handle browser back/forward buttons
  window.addEventListener("popstate", () => {
    window.tagFiltering.loadFromURL();
    window.tagFiltering.applyTagFilters();
  });

  // Initialize on page load
  window.tagFiltering.loadFromURL();
  window.tagFiltering.applyTagFilters();
  initTagSearch();
</script>

<style>
  /* Sidebar specific overrides */
  nav button {
    text-decoration: none !important;
  }
  
  nav button:hover {
    text-decoration: none !important;
  }

  /* Custom checkbox styles */
  .custom-checkbox {
    width: 16px;
    height: 16px;
    border: 2px solid #d1d5db;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .custom-checkbox .checkmark {
    opacity: 0;
    transform: scale(0.8);
    transition: all 0.2s ease;
    color: transparent;
  }

  .custom-checkbox.checked {
    border-color: #f97316;
    background-color: #f97316;
  }

  .custom-checkbox.checked .checkmark {
    opacity: 1;
    transform: scale(1);
    color: white;
  }

  /* Hover states */
  button:hover .custom-checkbox {
    border-color: #f97316;
  }

  button:hover .custom-checkbox:not(.checked) {
    background-color: #fff7ed;
  }
</style> 