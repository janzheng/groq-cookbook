---
import groqning from "../assets/groqning.svg";
import ExampleCard from "./ExampleCard.astro";
import ExampleRow from "./ExampleRow.astro";
import TagsSidebar from "./TagsSidebar.astro";

// Whitelist of sections to display
const ALLOWED_SECTIONS = ["integration", "streaming"];
// const ALLOWED_SECTIONS = [];

// Load cookbook examples from API
const response = await fetch(`${Astro.url.origin}/api/examples`);
const cookbookExamples = await response.json();

// Filter featured examples
const featuredExamples = cookbookExamples.filter(
  (example: any) => example.featured
);

// Organize examples by section for sidebar
const examplesBySection: Record<string, any[]> = {};
cookbookExamples.forEach((example: any) => {
  example.sections?.forEach((section: string) => {
    if (ALLOWED_SECTIONS?.length === 0 || ALLOWED_SECTIONS?.includes(section)) {
      if (!examplesBySection[section]) {
        examplesBySection[section] = [];
      }
      // Only add if not already in this section (avoid duplicates)
      if (!examplesBySection[section].find((ex) => ex.slug === example.slug)) {
        examplesBySection[section].push(example);
      }
    }
  });
});

// Calculate section counts (only for whitelisted sections, or all if whitelist is empty)
const sectionCounts: Record<string, number> = {};
cookbookExamples.forEach((example: any) => {
  example.sections?.forEach((section: string) => {
    if (ALLOWED_SECTIONS?.length === 0 || ALLOWED_SECTIONS?.includes(section)) {
      sectionCounts[section] = (sectionCounts[section] || 0) + 1;
    }
  });
});

// Calculate tag counts
const tagCounts: Record<string, number> = {};
cookbookExamples.forEach((example: any) => {
  example.tags?.forEach((tag: string) => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});
---

<div class="flex min-h-screen">
  <!-- Sidebar -->
  <TagsSidebar
    tagCounts={tagCounts}
    totalExamples={cookbookExamples.length}
    asideClass="mt-16"
  />

  <!-- Main content -->
  <div id="container" class="flex-1 max-w-5xl mx-auto px-4 py-8">
    <div class="mt-12 mb-6">
      <div class="flex flex-row gap-0 items-center">
        <!-- Left column - Image -->
        <div class="flex items-center justify-center w-36">
          <img src={groqning.src} alt="Groq API Logo" class="w-32 h-32" />
        </div>

        <!-- Right column - Title and Description -->
        <div class="space-y-4">
          <h1 class="text-4xl font-bold text-gray-900 mb-4!">
            Examples
          </h1>
          <p class="text-xl leading-relaxed text-gray-600">
            Explore practical examples and tutorials for building with the Groq
            API.
            <br />Our examples include tutorials, source code, documentation, and live
            demos.
          </p>
        </div>
      </div>
    </div>

    <!-- Featured Examples -->
    {
      featuredExamples.length > 0 && (
        <div class="mb-16">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-2 mx-auto px-2">
            {featuredExamples.map((example: any) => (
              <ExampleCard example={example} />
            ))}
          </div>
        </div>
      )
    }

    <!-- Tags -->
    <div class="mb-12">
      <!-- <h2 class="text-xl font-semibold text-gray-700 mb-6 text-center">
        Recipes
      </h2> -->

      <!-- Sections -->
      <!-- <div class="mb-6">
        <div class="flex flex-wrap justify-center gap-2">
          {
            Object.entries(sectionCounts).map(([section, count]) => (
              <button
                class="cursor-pointer px-6 py-1 text-gray-900 hover:text-gray-900 bg-white border hover:border-groq-500 hover:bg-red-50 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 items-center filter-section"
                data-section={section}
              >
                <span class="text-md font-600 capitalize">{section}</span>
              </button>
            ))
          }
          <button
            class="cursor-pointer px-8 py-1 text-gray-900 hover:text-gray-900 bg-white border hover:border-groq-500 hover:bg-red-50 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 items-center filter-section"
          >
            <span class="text-md">All</span>
          </button>
        </div>
      </div> -->
      <div id="tags-container" class="flex flex-wrap justify-center gap-3">
        {
          Object.entries(tagCounts).map(([tag, count]) => (
            <button
              class="cursor-pointer px-4 py-2 bg-gray-100 hover:bg-groq-100 text-gray-700 hover:text-groq-800 rounded-full text-sm font-medium transition-colors duration-200 flex items-center gap-2 filter-tag"
              data-tag={tag}
            >
              <span class="capitalize">{tag}</span>
              <span class="tag-count bg-white text-gray-600 px-2 py-0.5 rounded-full text-xs">
                {count}
              </span>
            </button>
          ))
        }
        <button
          class="px-4 py-2 bg-groq-500 text-white hover:bg-groq-600 hover:text-white rounded-full text-sm font-medium transition-colors duration-200 flex items-center gap-2 filter-clear filter-clear-tag"
        >
          <span>All</span>
          <span
            id="all-tags-count"
            class="bg-white text-gray-700 px-2 py-0.5 rounded-full text-xs"
            >{cookbookExamples.length}</span
          >
        </button>
      </div>
    </div>


    <!-- No Results State -->
    <div id="no-results" class="hidden text-center py-16">
      <div class="max-w-md mx-auto">
        <div class="text-6xl mb-4">üîç</div>
        <h3 class="text-2xl font-semibold text-gray-900 mb-2">
          No recipes found
        </h3>
        <p class="text-gray-600 mb-6">
          We couldn't find any recipes matching your current filters. Try
          adjusting your selection or clearing all filters.
        </p>
        <button
          id="clear-all-filters"
          class="px-6 py-3 bg-groq-500 text-white rounded-lg hover:bg-groq-600 transition-colors duration-200 font-medium"
        >
          Clear All Filters
        </button>
      </div>
    </div>

    <!-- Examples List (simplified rows) -->
    <div
      id="examples-grid"
      class="bg-white border-gray-200 divide-y divide-gray-100 mb-12"
    >
      {cookbookExamples.map((example: any) => <ExampleRow example={example} />)}
    </div>
  </div>
</div>

<script define:vars={{ cookbookExamples }}>
  // Use the real examples data passed from the server
  const examples = cookbookExamples;

  // Wait for the global tagFiltering to be available
  document.addEventListener('DOMContentLoaded', () => {
    // Pill tag filter handlers
    document.querySelectorAll("#tags-container .filter-tag").forEach((button) => {
      button.addEventListener("click", () => {
        const tag = button.dataset.tag || null;
        if (window.tagFiltering) {
          window.tagFiltering.setActiveTag(tag);
        }
      });
    });

    // Pill clear filter handlers
    document.querySelectorAll("#tags-container .filter-clear-tag").forEach((button) => {
      button.addEventListener("click", () => {
        if (window.tagFiltering) {
          window.tagFiltering.clearActiveTag();
        }
      });
    });
  });

  // Clear all filters button in no results state
  document
    .getElementById("clear-all-filters")
    ?.addEventListener("click", () => {
      // Reset any active filters and reload page to clear all states
      const url = new URL(window.location.href);
      url.searchParams.delete("tag");
      window.location.href = url.toString();
    });
</script>
