---
export const prerender = false;

import groqning from "../../assets/groqning.svg";
import Layout from "../../layouts/Layout.astro";
import Sidebar from "../../components/Sidebar.astro";
import UserByline from "../../components/UserByline.astro";
import DemoButton from "../../components/DemoButton.astro";
import FlexButton from "../../components/FlexButton.astro";
import { processMarkdownWithCodeBlocks } from "../../utils/codeBlockProcessor";

import { Icon } from "astro-icon/components";

const { slug } = Astro.params;

// Fetch the recipe content from the API
const response = await fetch(`${Astro.url.origin}/api/recipe?slug=${slug}`);

if (!response.ok) {
  return Astro.redirect("/404");
}

const recipeData = await response.json();

// Fetch all examples for the TOC
const examplesResponse = await fetch(`${Astro.url.origin}/api/examples`);
const allExamples = await examplesResponse.json();

// Group examples by section
const examplesBySection: Record<string, any[]> = {};
allExamples.forEach((example: any) => {
  example.sections.forEach((section: string) => {
    if (!examplesBySection[section]) {
      examplesBySection[section] = [];
    }
    examplesBySection[section].push(example);
  });
});

// Process markdown content with code blocks
const htmlContent = await processMarkdownWithCodeBlocks(
  recipeData.readmeContent || ""
);
---

<Layout>
  <Fragment slot="head">
    <title>{recipeData.title || slug}</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </Fragment>

  <body class="bg-gray-50">
    <div class="">
      <!-- Left Sidebar TOC -->
      <!-- <Sidebar currentSlug={slug} examplesBySection={examplesBySection} /> -->

      <!-- Main Content -->
      <main class="">
        <div class="max-w-4xl mx-auto px-8 py-8">
          <!-- Recipe Header -->
          <header class="mt-8 mb-8">
            <div class="flex mb-4">
              <FlexButton
                href="/"
                size="inherit"
                text=""
                variant="ghost"
                svgSrc={groqning.src}
                svgAlt="Groq API Cookbook"
                text="Groq API Cookbook"
                textClass="color-groq-title"
                target="_self"
              />
            </div>
            <h1 class="text-3xl font-bold text-gray-900 mb-4 mt-8!">
              {recipeData.title || slug}
            </h1>
            {
              recipeData.description && (
                <p class="text-lg mb-4">{recipeData.description}</p>
              )
            }

            <!-- Recipe Meta -->
            <div class="flex items-center gap-6 text-sm text-gray-500 mb-6">
              {recipeData.author && <UserByline author={recipeData.author} />}
              {
                recipeData.date && (
                  <span>
                    {new Date(recipeData.date).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </span>
                )
              }
              <div class="flex gap-3">
                {
                  recipeData.githubLink && (
                    <FlexButton
                      href={recipeData.githubLink}
                      size="inherit"
                      text="View on GitHub"
                      variant="ghost"
                    />
                  )
                }
              </div>

              <div class="flex gap-3">
                {
                  true && (
                    <FlexButton
                      href={recipeData.githubLink}
                      size="inherit"
                      icon="mdi:play-circle-outline"
                      text="View Demo"
                      variant="ghost"
                    />
                  )
                }
              </div>
            </div>

            <!-- Tags -->
            {
              recipeData.tags && recipeData.tags.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {recipeData.tags.map((tag: string) => (
                    <a 
                      href={`/?tag=${encodeURIComponent(tag)}`}
                      class="button hover:bg-gray-200 px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full capitalize transition-colors duration-200 cursor-pointer"
                    >
                      {tag}
                    </a>
                  ))}
                </div>
              )
            }
          </header>

          <!-- Recipe Content -->
          <article class="prose prose-lg max-w-none">
            <Fragment set:html={htmlContent} />
          </article>
        </div>
      </main>
    </div>

    <style>
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
    </style>

    <script>
      // Copy code functionality for large code fences
      function copyFenceCode(button: HTMLButtonElement) {
        const container = button.closest(".code-fence-container");
        const codeBlock = container?.querySelector("code");
        if (!codeBlock) return;

        const text = codeBlock.textContent || "";
        const copyIcon = button.querySelector(".copy-icon");
        const checkIcon = button.querySelector(".check-icon");

        navigator.clipboard
          .writeText(text)
          .then(() => {
            // Show success state
            copyIcon?.classList.add("hidden");
            checkIcon?.classList.remove("hidden");
            button.classList.add("bg-gray-100", "text-green-600");
            button.classList.remove(
              "bg-gray-200",
              "hover:bg-gray-300",
              "text-gray-600"
            );

            // Reset after 2 seconds
            setTimeout(() => {
              copyIcon?.classList.remove("hidden");
              checkIcon?.classList.add("hidden");
              button.classList.remove("bg-gray-100", "text-green-600");
              button.classList.add(
                "bg-gray-200",
                "hover:bg-gray-300",
                "text-gray-600"
              );
            }, 2000);
          })
          .catch(() => {
            // Fallback for older browsers
            const textArea = document.createElement("textarea");
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand("copy");
            document.body.removeChild(textArea);

            // Show success state
            copyIcon?.classList.add("hidden");
            checkIcon?.classList.remove("hidden");
            button.classList.add("bg-gray-100", "text-green-600");
            button.classList.remove(
              "bg-gray-200",
              "hover:bg-gray-300",
              "text-gray-600"
            );

            setTimeout(() => {
              copyIcon?.classList.remove("hidden");
              checkIcon?.classList.add("hidden");
              button.classList.remove("bg-gray-100", "text-green-600");
              button.classList.add(
                "bg-gray-200",
                "hover:bg-gray-300",
                "text-gray-600"
              );
            }, 2000);
          });
      }

      // Copy inline code functionality - updated to work with direct code element clicks
      function copyInlineCode(codeElement: HTMLElement) {
        const text = codeElement.textContent || "";

        navigator.clipboard
          .writeText(text)
          .then(() => {
            // Show success state with green flash
            codeElement.classList.add("copied");

            // Reset after 300ms for a quick flash
            setTimeout(() => {
              codeElement.classList.remove("copied");
            }, 300);
          })
          .catch(() => {
            // Fallback for older browsers
            const textArea = document.createElement("textarea");
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand("copy");
            document.body.removeChild(textArea);

            // Show success state with green flash
            codeElement.classList.add("copied");

            setTimeout(() => {
              codeElement.classList.remove("copied");
            }, 300);
          });
      }

      // Make functions globally available
      (window as any).copyFenceCode = copyFenceCode;
      (window as any).copyInlineCode = copyInlineCode;
    </script>
  </body>
</Layout>
